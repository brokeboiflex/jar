{"version":3,"file":"index.cjs","sources":["../src/jsx-types.ts","../src/router-context.ts","../src/router.tsx"],"sourcesContent":["// jsx-types.d.ts\r\nimport * as React from \"react\";\r\nimport * as Preact from \"preact\";\r\nimport * as PreactHooks from \"preact/hooks\";\r\n// Define a universal JSX type\r\nexport type UniversalJSXElement = React.ReactElement | Preact.JSX.Element;\r\n\r\n// Use this to handle JSX elements for both React and Preact\r\nexport const isValidElement = (element: any): element is UniversalJSXElement =>\r\n  React.isValidElement(element) || Preact.isValidElement(element);\r\n\r\n// Dynamically choose between React and Preact\r\nconst hooks =\r\n  typeof PreactHooks.useContext === \"function\" ? PreactHooks : React;\r\n\r\nexport const createContext =\r\n  typeof Preact.createContext === \"function\"\r\n    ? Preact.createContext\r\n    : React.createContext;\r\n\r\nexport const { useContext } = hooks;\r\n","import { createContext, useContext } from \"./jsx-types\";\r\nimport { StoreApi } from \"zustand\";\r\nimport { RouterState } from \"./router\";\r\n\r\n// Define the RouterContext with the appropriate type\r\nexport const RouterContext = createContext(null);\r\n\r\nexport const useRouterStore = (): StoreApi<RouterState> => {\r\n  const context = useContext(RouterContext);\r\n  if (!context) {\r\n    throw new Error(\"useRouterStore must be used within a RouterProvider\");\r\n  }\r\n  // @ts-ignore\r\n  return context;\r\n};\r\n","import { UniversalJSXElement, isValidElement } from \"./jsx-types\";\r\nimport { create } from \"zustand\";\r\nimport { createJSONStorage, persist, StateStorage } from \"zustand/middleware\";\r\nimport {\r\n  RouterContext,\r\n  useRouterStore as useRouterStoreContext,\r\n} from \"./router-context\";\r\n\r\nexport interface RouterProps {\r\n  children: UniversalJSXElement;\r\n  storage: StateStorage;\r\n  emptyRoute?: UniversalJSXElement;\r\n}\r\n\r\nexport interface RouteProps {\r\n  path: string;\r\n  component: UniversalJSXElement;\r\n}\r\n\r\nexport interface RouterState {\r\n  location: string;\r\n  navigate: (route: string) => void;\r\n}\r\n\r\n// Factory function to create the store\r\nexport function createRouterStore(storage: StateStorage): () => RouterState {\r\n  // @ts-ignore\r\n  return create(\r\n    persist(\r\n      (set) => ({\r\n        location: \"/\", // Default route\r\n        navigate: (route: string) => set({ location: route }),\r\n      }),\r\n      {\r\n        name: \"router-storage\", // Name of the item in chrome.storage.local\r\n        storage: createJSONStorage(() => storage),\r\n      }\r\n    )\r\n  );\r\n}\r\n\r\nexport function Route(props: RouteProps) {\r\n  return null;\r\n}\r\n\r\nexport function Router({\r\n  children,\r\n  storage,\r\n  emptyRoute = null,\r\n}: RouterProps): UniversalJSXElement {\r\n  const useRouterStore = createRouterStore(storage);\r\n  const { location } = useRouterStore();\r\n\r\n  // Filter children to get Route components\r\n  const routes = Array.isArray(children) ? children : [children];\r\n  const routeElements = routes.filter(\r\n    (child) => isValidElement(child) && (child as any).type === Route\r\n  );\r\n\r\n  // Find the component that matches the current route\r\n  const currentRoute = routeElements.find((route) => {\r\n    const routeProps = (route as any).props as RouteProps;\r\n    return routeProps.path === location;\r\n  });\r\n\r\n  // Render the matching component or a default message\r\n  if (currentRoute) {\r\n    const routeProps = (currentRoute as any).props as RouteProps;\r\n    return (\r\n      // @ts-ignore\r\n      <RouterContext.Provider value={useRouterStoreContext}>\r\n        {routeProps.component}\r\n      </RouterContext.Provider>\r\n    );\r\n  } else {\r\n    return emptyRoute;\r\n  }\r\n}\r\n"],"names":["useContext","PreactHooks","React","RouterContext","Preact","createContext","useRouterStore","context","Error","createRouterStore","storage","create","persist","set","location","navigate","route","name","createJSONStorage","Route","props","_ref","children","_ref$emptyRoute","emptyRoute","currentRoute","Array","isArray","filter","child","isValidElement","element","type","find","path","h","Provider","value","useRouterStoreContext","component"],"mappings":"wcAoBeA,GAPqB,mBAA3BC,EAAYD,WAA4BC,EAAcC,GAOhDF,WCfFG,GDWqB,mBAAzBC,EAAOC,cACVD,EAAOC,cACPH,EAAMG,eCb+B,MAE9BC,EAAiB,WAC5B,IAAMC,EAAUP,EAAWG,GAC3B,IAAKI,EACH,MAAM,IAAIC,MAAM,uDAGlB,OAAOD,CACT,ECWM,SAAUE,EAAkBC,GAEhC,OAAOC,EAAMA,OACXC,EAAOA,QACL,SAACC,GAAS,MAAA,CACRC,SAAU,IACVC,SAAU,SAACC,GAAa,OAAKH,EAAI,CAAEC,SAAUE,GAAQ,EACtD,EACD,CACEC,KAAM,iBACNP,QAASQ,EAAAA,kBAAkB,WAAA,OAAMR,CAAO,KAIhD,CAEgB,SAAAS,EAAMC,GACpB,OACF,IAAA,gCAEM,SAAgBC,GAIR,IAHZC,EAAQD,EAARC,SACOC,EAAAF,EACPG,WAAAA,WAAUD,EAAG,KAAIA,EAGTT,EADeL,EAHhBY,EAAPX,QAIqBJ,GAAbQ,SASFW,GANSC,MAAMC,QAAQL,GAAYA,EAAW,CAACA,IACxBM,OAC3B,SAACC,GAAK,OF/CR3B,EAAM4B,eADuBC,EEgDDF,IF/CKzB,EAAO0B,eAAeC,KE+ChBF,EAAcG,OAASb,EFhDlC,IAACY,CEgDsC,GAIhCE,KAAK,SAACjB,GAEvC,OADoBA,EAAcI,MAChBc,OAASpB,CAC7B,GAGA,OAAIW,EAIAU,EAAChC,EAAciC,SAASC,CAAAA,MAAOC,GAHbb,EAAqBL,MAIzBmB,WAITf,CAEX"}